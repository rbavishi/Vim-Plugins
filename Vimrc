set nocompatible

"Load pathogen"
call pathogen#infect( 'bundle/{}' )

" Include the system settings
:if filereadable( "/etc/vimrc" )
   source /etc/vimrc
:endif

" Include Arista-specific settings
:if filereadable( $VIM . "/vimfiles/arista.vim" )
   source $VIM/vimfiles/arista.vim
:endif

" Put your own customizations below

"Making tab completion work like bash completion when opening files
set wildmode=longest,list,full
set wildmenu

"Needed for ctags"
" set tags="/home/rbavishi/CBMC\ -\ Bug\ Clustering\ Project/cbmc-5.0/src/tags"
set tags=tags;/

"Using tab to browse between buffers. Doesn't work
nnoremap <silent> <C-Tab> :bn<CR>
nnoremap <silent> <C-S-Tab> :bp<CR>
map <F2> :mksession! ~/.vim_session <cr> 
" Quick write session with F2
map <F3> :source ~/.vim_session <cr>   
" And load session with F3

" :noh
"nnoremap <CR> :noh<CR><CR>
nnoremap <silent> <C-l> :nohl<CR><C-l>
command -bar -nargs=1 -complete=file Source :source <args> | :q | :q
nnoremap <silent> <C-k> :MBEToggleAll<CR> :MBEToggleAll<CR> :MBEToggleAll<CR>

"Lid customizations"
"let LID_Jump_To_Match = 0
"let LID_File = ''
"nnoremap <silent> <F5> :Lid <C-R><C-W><CR>

map _u :call ID_search()<Bar>execute "/\\<" . g:word . "\\>"<CR>
map _n :n<Bar>execute "/\\<" . g:word . "\\>"<CR>
"function ID_search()
    "let g:word = expand("<cword>")
    "let x = system("lid --key=none ". g:word)
    "let x = substitute(x, "\n", " ", "g")
    "execute "next " . x
"endfun

" Taglist, move to the next/previous tag
map + :tn<CR>
map - :tp<CR>

" Disable Ex mode"
nnoremap Q <nop>

"Search for the identifier under the cursor."
nnoremap <silent> <C-x> :ts <C-R><C-W><CR>

syntax on
filetype plugin indent on
filetype plugin on
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
" Settings for solarized colorscheme"
syntax enable
"set background=dark
"let g:solarized_termcolors=256
"colorscheme solarized


" Colorscheme settings for Lucius"
"colorscheme lucius
"LuciusBlackHighContrast
"hi StatusLine ctermbg=240"

"Molokai Scheme
"colorscheme molokai
"let g:molokai_original = 1
"Scrolling ease"

"Github Scheme
"colorscheme github
"set scrolloff=2

"Ir_Black Scheme
"set background=dark
"colorscheme ir_black
"syntax on

"CodeSchool theme
colorscheme xoria256
"colorscheme solarized
"colorscheme desertink
"colorscheme railscasts
"colorscheme distinguished
"colorscheme codeschool
"colorscheme Miranda
"colorscheme jellybeans_modified
"colorscheme Shivanee
"let g:codeschool_termcolors=256
"highlight Normal ctermfg=white ctermbg=black
"Display airline even when there is no vsplit                                                                                                     
" Transparent Background
hi Normal ctermbg=none
highlight NonText ctermbg=none
set number
set laststatus=2                                                                                                                                                                                                   
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"Remove annoying trailing characters status line message in airvim                                                                                                                                                 
autocmd VimEnter * AirlineToggleWhitespace 

"Set shortcut for CtrlP buffer search"
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPBuffer'

"Set shortcut for CtrlP file search"
let g:ctrlp_map = '<c-s-p>'
let g:ctrlp_cmd = 'CtrlP'
let @h="#include<bits/stdc++.h>\n#define pb(a) push_back(a)\n#define mp(a,b) make_pair(a,b)\n#define pii pair<int,int>\n#define ll long long\nusing namespace std;\n"
let mapleader = ","
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
let g:no_atp=1
set shiftwidth=4
set expandtab
nmap "" <leader>ci
nmap <C-Z> :bn<cr>
nmap <C-A> :bp<cr>
let g:ycm_autoclose_preview_window_after_insertion = 1
